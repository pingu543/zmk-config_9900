/*
 * Copyright (c) 2023 ZitaoTech
 *
 * Fork of ZitaoTech's zmk-config_9900. Optimized for iOS and Windows usage.
 *
 * SPDX-License-Identifier: MIT
 */
  
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define ALT 1
#define SYM 2
#define UPPER 3

&sk {
    release-after-ms = <3000>;
};
&sl {
    release-after-ms = <3000>;
};

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mkp LCLK>, <&bt BT_CLR>;
        };
    };
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            bindings = <&out &kp>;
        };
    };
    behaviors {
        tdp: tap_dance_punctuations {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp COMMA>, <&kp EXCL>, <&kp QMARK>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            release-after-ms = <1000>;
            #binding-cells = <1>;
            bindings = <&kp>;
            quick-release;
        };
        hts: hold_tap_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <100>;
            bindings = <&kp>, <&skq>;
        };
        tdsc: tap_dance_shft_clck {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&hts CLCK LSHFT>, <&kp CLCK>;
        };
        htsk: hold_tap_skq_kp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <100>;
            bindings = <&skq>, <&kp>;
        };
        tdcs: tap_dance_clck_shft {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&htsk LSHFT CLCK>, <&skq LSHFT>;
        };
        htls: hold_tap_layer_sticky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <100>;
            bindings = <&to>, <&msl>;
        };
        htkpsl: hold_tap_kp_sl {
	        compatible = "zmk,behavior-hold-tap";
		    #binding-cells = <2>;
	        flavor = "tap-preferred";
	        tapping-term-ms = <200>;
	        quick-tap-ms = <125>;
	        require-prior-idle-ms = <125>;
            bindings = <&kp>, <&msl>;
        };
        tdhal: tap_dance_hold_alt_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&htls ALT ALT>, <&to ALT>;
        };
        tdhale: tap_dance_hold_alt_layer_eject {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&htkpsl C_EJECT ALT>, <&to ALT>;
        };
        tdhsl: tap_dance_hold_sym_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&htls SYM SYM>, <&to SYM>;
        };
        tdhsul: tap_dance_hold_sym_upper_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&htls SYM SYM>, <&to SYM>, <&to UPPER>;
        };
        // Binging &to ALT to second tap allows switching from sticky ALT to full ALT from ALT layer, rather than having to go back to DEFAULT layer first.
        tddl: tap_dance_default_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&to DEFAULT>, <&to ALT>;
        };
        tddul: tap_dance_default_upper_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&to DEFAULT>, <&to DEFAULT>, <&to UPPER>;
        };
        tdal: tap_dance_alt_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&sl ALT>, <&to ALT>;
        };
        tdsl: tap_dance_sym_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&to SYM>, <&to SYM>;
        };
        tdul: tap_dance_upper_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&msl UPPER>, <&to UPPER>;
        };
        tdal2: tap_dance_alt_layer_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&msl ALT>, <&to ALT>;
        };
        // Credit: Drexel Macintosh
        // mtt expects LS(letter) letter to recreate BlackBerry's tap for lowercase and hold for uppercase behavior.
        mtt: mod_tap_tap {
	        compatible = "zmk,behavior-hold-tap";
		    #binding-cells = <2>;
	        flavor = "tap-preferred";
	        tapping-term-ms = <200>;
	        quick-tap-ms = <125>;
	        require-prior-idle-ms = <125>;
	        bindings = <&tap>, <&tap>;

        // Credit: Drexel Macintosh
        // Drexel's version of shift/capslock.
        SHFT: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sk LSHFT>, <&kp CLCK>;
        };
   	 };
    };
    macros {
        msl: macro_sticky_layer {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_tap &to DEFAULT>
                , <&macro_param_1to1>
                , <&macro_tap &sl MACRO_PLACEHOLDER>
                ;
        };
        // Credit: Drexel Macintosh
        // tap will only send the keypress once, even if the key is held down.
        // This makes BlackBerry's hold for uppercase behavior easier to use.
        tap: tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            // By default, macros will tap each behavior in the bindings list,
            // so this will tap "&kp <param1>".
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
        // Credit: jonmilley
        // These macros will turn off all the bluetooth connections except the current active one.
        // This will prevent the keyboard from waking up all the paired devices at the same time everytime it is used.
        bt0: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4>;
            label = "BT0";
        };
        bt1: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_DISC 0 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4>;
            label = "BT1";
        };
        bt2: bt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 3 &bt BT_DISC 4>;
            label = "BT2";
        };
        bt3: bt3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 4>;
            label = "BT3";
        };
        bt4: bt4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 3>;
            label = "BT4";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {

            bindings = <

        /*
         *    KEYBOARD LAYOUT - ASCII by KyleBing
         *
                              ---------------------                                                                -------------------------
                             |    Shoulder Key1    |                                                              |      Shoulder Key2      |
                 ---------------------------------------------------------------------------------------------------------------------------------------------------
                |        Call key        |   Blackberry Key    |              Trackpad            |             Back Key           |          Endcall Key           |
                -----------------------------------------------------------------------------------------------------------------------------------------------------
                |     Q      |     W     |     E    |     R    |         T       |       Y        |        U       |       I       |        O        |      P       |
                -----------------------------------------------------------------------------------------------------------------------------------------------------
                |     A      |     S     |     D    |     F    |         G       |       H        |        J       |       K       |        L        |      ←       |
                -----------------------------------------------------------------------------------------------------------------------------------------------------
                 \    alt    |     Z     |     X    |     C    |         V       |       B        |        N       |       M       |        $        |    Enter    /
                   -----------------------------------------------------------------------------------------------------------------------------------------------
                              \      aA        |       0        |                    SPACE                  |          SYM          |         aA    /
                                -------------------------------------------------------------------------------------------------------------------
        */

                                    &mkp LCLK                                                                       &mkp RCLK
    &sk GLOBE                       &sk LGUI                                &mkp LCLK                               &sk LALT                        &sk LCTRL
    &kp Q           &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P
    &kp A           &kp S           &kp D           &kp F           &kp G           &kp H           &kp J           &kp K           &kp L           &kp BSPC
    &tdal           &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &kp UP          &kp RET
                    &SHFT           &kp DOWN                                &kp SPACE                               &kp LEFT        &kp RIGHT
            >;
        };

        alt_layer {

            bindings = <
                                    &mkp LCLK                                                                       &mkp RCLK
    &kp TAB                         &kp CLCK                                &mkp LCLK                               &mtt C_EJECT ESC                &kp DEL 
    &mtt TILDE HASH &mtt GRAVE N1   &mtt LBRC N2    &mtt RBRC N3    &mtt LBKT LPAR  &mtt RBKT RPAR  &mtt LT UNDER   &mtt GT MINUS   &mtt CARET PLUS &mtt PRCNT AT
    &mtt EQUAL STAR &mtt N4 N4      &mtt N5 N5      &mtt N6 N6      &mtt BSLH SLASH &mtt PIPE COLON &mtt AMPS SEMI  &mtt APOS APOS  &mtt DQT DQT    &kp BSPC
    &tddl           &mtt N7 N7      &mtt N8 N8      &mtt N9 N9      &mtt QMARK QMARK &mtt EXCL EXCL &mtt COMMA COMMA &mtt DOT DOT   &mtt DLLR DLLR  &kp RET
                    &tdul           &mtt N0 N0                              &kp SPACE                               &kp LEFT        &kp RIGHT

            >;
        };

        sym_layer {

            bindings = <
                                    &mkp LCLK                                                                       &mkp RCLK
    &kp UP                          &kp DOWN                                &mkp LCLK                               &kp LEFT                        &kp RIGHT
    &kp Q           &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P
    &kp A           &kp S           &kp D           &kp F           &kp G           &kp H           &kp J           &kp K           &kp L           &kp BSPC
    &tdal           &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &kp DEL         &kp RET
                    &sk LSHFT       &kp TAB                                 &kp SPACE                               &tddl           &sk RSHFT

            >;
        };

        upper_layer {

            bindings = <
                                    &none                                                                           &none
    &bt0                            &bt1                                    &bt BT_CLR                              &bt2                            &bt3
    &bt4            &none           &none           &sys_reset      &ext_power EP_TOG &none         &none           &none           &none           &none
    &none           &none           &none           &none           &none             &none         &none           &none           &none           &none
    &to DEFAULT     &none           &none           &none           &bl BL_DEC        &bl BL_TOG    &bl BL_INC      &none           &bootloader     &none
                    &to DEFAULT     &none                                   &out OUT_TOG                            &none           &none
            >;
        };
    };
};

